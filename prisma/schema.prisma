generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  email            String  @unique
  password         String
  fullname         String
  username         String  @unique
  profile_photo    String?
  profile_photo_id String?
  bio              String?

  posts       Post[]        @relation("AuthorPosts")
  taggedIn    Post[]        @relation("TaggedPosts")
  savedPosts  Post[]        @relation("SavedPosts")
  like        Like[]
  comment     Comment[]
  commentLike CommentLike[]

  following Follow[] @relation("follower")
  followers Follow[] @relation("following")
}

enum Aspect_ratio {
  original
  square
  portrait
  video
}

model Post {
  id                     String       @id @default(cuid())
  caption                String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  aspect_ratio           Aspect_ratio @default(square)
  first_image_dimensions String?

  author   User   @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId String

  likes    Like[]
  comments Comment[]
  savedBy    User[]       @relation("SavedPosts")

  location    String?
  taggedUsers User[]       @relation("TaggedPosts")
  postImages  PostImages[]

  @@index([authorId])
}

model PostImages {
  id         String @id @default(cuid())
  imageUrl   String
  imageUrlId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  commentLike CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
